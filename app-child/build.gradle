plugins {
    id 'net.minecrell.licenser' version '0.3'
//    id "com.github.sherter.google-java-format" version "0.6"
//    id "net.ltgt.errorprone" version "0.0.13"
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
}

apply plugin: 'java'
apply plugin: 'maven'
//apply plugin: 'com.github.sherter.google-java-format'

//googleJavaFormat {
//    toolVersion '1.5'
//    include '**/*.java'
//    exclude '**/generated-sources/*'
//}

group = 'com.example.child'
version = '0.0.1'

description = """Samples for Cadence. Based on samples for AWS SWF"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    mavenCentral()
}

dependencies {
    compile group: 'com.uber.cadence', name: 'cadence-client', version: '2.7.1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.4'
    compile group: 'commons-configuration', name: 'commons-configuration', version: '1.9'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.8'

    compileOnly group: 'org.projectlombok', name: 'lombok'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.7.3'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

//compileJava {
//    dependsOn 'googleJavaFormat'
//    options.encoding = 'UTF-8'
//    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-XepExcludedPaths:" +
//            ".*/generated-sources/.*"
//}

task execute(type: JavaExec) {
    main = findProperty("mainClass") ?: ""
    classpath = sourceSets.main.runtimeClasspath
}

license {
    header rootProject.file('license-header.txt')
}

test {
    useJUnitPlatform()
}